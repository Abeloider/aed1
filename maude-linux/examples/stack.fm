  (fth TRIV is
    sort Elt .
   endfth)

  (omod STACK[X :: TRIV] is
    protecting MACHINE-INT .
    protecting QID .
    subsort Qid < Oid .
    class Node[X] | next : Oid, contents : Elt.X .
    class Stack[X] | first : Oid .
    msg _push_ : Oid Elt.X -> Msg .
    msg _pop : Oid -> Msg .
    msg _top_ : Oid Oid -> Msg .
    msg _elt_ : Oid Elt.X -> Msg .
  
    op null : -> Oid .
    op o : Oid MachineInt -> Oid .
  
    vars O O' O'' : Oid .
    var E : Elt.X .
    var N : MachineInt .
  
    rl [top] : *** top defined only on non-empty stacks
       < O : Stack[X] | first : O' >
       < O' : Node[X] | contents : E > (O top O'')
       => < O : Stack[X] | > < O' : Node[X] | >
          (O'' elt E) .
  
    rl [push1] : *** push on a non-empty stack
       < O : Stack[X] | first : o(O, N) > (O push E)
       => < O : Stack[X] | first : o(O, N + 1) >
          < o(O, N + 1) : Node[X] | contents : E, next : o(O, N) > .
    rl [push2] : *** push on an empty stack
       < O : Stack[X] | first : null > (O push E)
       => < O : Stack[X] | first : o(O, 0) >
          < o(O, 0) : Node[X] | contents : E, next : null > .
  
    rl [pop] : *** pop defined only on non-empty stacks
       < O : Stack[X] | first : O' >
       < O' : Node[X] | next : O'' > (O pop)
       => < O : Stack[X] | first : O'' > .
   endom)

  (view MachineInt from TRIV to MACHINE-INT is
     sort Elt to MachineInt .
   endv)

  (omod EXAMPLE is
    protecting STACK[MachineInt] .
    op init : -> Configuration .
    op stack : -> Oid .
    eq init
      = < stack : Stack[MachineInt] | first : null >
        (stack push 0)
        (stack push 1)
        (stack push 2)
        (stack top stack)
        (stack pop) .
   endom)
  
  (rew init .)
  
  *** Rewrite in EXAMPLE : init . 
  *** Result Configuration : 
  ***        ( stack elt 1 ) 
  ***        < stack : Stack [ MachineInt ] | first : o ( stack , 1 ) > 
  ***        < o ( stack , 0 ) : Node [ MachineInt ] | 
  ***              contents : 1 , next : null > 
  ***        < o ( stack , 1 ) : Node [ MachineInt ] | 
  ***              contents : 2 , next : o ( stack , 0 ) >
